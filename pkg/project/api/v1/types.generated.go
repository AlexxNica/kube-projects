// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_unversioned.TypeMeta
		var v1 pkg2_v1.ObjectMeta
		var v2 pkg3_types.UID
		var v3 time.Time
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *ProjectList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ListMeta
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else if z.HasExtensions() && z.EncExt(yy10) {
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy12 := &x.ListMeta
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else if z.HasExtensions() && z.EncExt(yy12) {
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym15 := z.EncBinary()
					_ = yym15
					if false {
					} else {
						h.encSliceProject(([]Project)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSliceProject(([]Project)(x.Items), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ProjectList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym17 := z.DecBinary()
	_ = yym17
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct18 := r.ContainerType()
		if yyct18 == codecSelferValueTypeMap1234 {
			yyl18 := r.ReadMapStart()
			if yyl18 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl18, d)
			}
		} else if yyct18 == codecSelferValueTypeArray1234 {
			yyl18 := r.ReadArrayStart()
			if yyl18 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl18, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ProjectList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys19Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys19Slc
	var yyhl19 bool = l >= 0
	for yyj19 := 0; ; yyj19++ {
		if yyhl19 {
			if yyj19 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys19Slc = r.DecodeBytes(yys19Slc, true, true)
		yys19 := string(yys19Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys19 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv22 := &x.ListMeta
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv22) {
				} else {
					z.DecFallback(yyv22, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv24 := &x.Items
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSliceProject((*[]Project)(yyv24), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys19)
		} // end switch yys19
	} // end for yyj19
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ProjectList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv29 := &x.ListMeta
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv29) {
		} else {
			z.DecFallback(yyv29, false)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv31 := &x.Items
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			h.decSliceProject((*[]Project)(yyv31), d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ProjectSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym33 := z.EncBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep34 := !z.EncBinary()
			yy2arr34 := z.EncBasicHandle().StructToArray
			var yyq34 [1]bool
			_, _, _ = yysep34, yyq34, yy2arr34
			const yyr34 bool = false
			yyq34[0] = len(x.Finalizers) != 0
			var yynn34 int
			if yyr34 || yy2arr34 {
				r.EncodeArrayStart(1)
			} else {
				yynn34 = 0
				for _, b := range yyq34 {
					if b {
						yynn34++
					}
				}
				r.EncodeMapStart(yynn34)
				yynn34 = 0
			}
			if yyr34 || yy2arr34 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq34[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							h.encSlicev1_FinalizerName(([]pkg2_v1.FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encSlicev1_FinalizerName(([]pkg2_v1.FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr34 || yy2arr34 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ProjectSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym38 := z.DecBinary()
	_ = yym38
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct39 := r.ContainerType()
		if yyct39 == codecSelferValueTypeMap1234 {
			yyl39 := r.ReadMapStart()
			if yyl39 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl39, d)
			}
		} else if yyct39 == codecSelferValueTypeArray1234 {
			yyl39 := r.ReadArrayStart()
			if yyl39 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl39, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ProjectSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys40Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys40Slc
	var yyhl40 bool = l >= 0
	for yyj40 := 0; ; yyj40++ {
		if yyhl40 {
			if yyj40 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys40Slc = r.DecodeBytes(yys40Slc, true, true)
		yys40 := string(yys40Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys40 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv41 := &x.Finalizers
				yym42 := z.DecBinary()
				_ = yym42
				if false {
				} else {
					h.decSlicev1_FinalizerName((*[]pkg2_v1.FinalizerName)(yyv41), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys40)
		} // end switch yys40
	} // end for yyj40
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ProjectSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj43 int
	var yyb43 bool
	var yyhl43 bool = l >= 0
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv44 := &x.Finalizers
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			h.decSlicev1_FinalizerName((*[]pkg2_v1.FinalizerName)(yyv44), d)
		}
	}
	for {
		yyj43++
		if yyhl43 {
			yyb43 = yyj43 > l
		} else {
			yyb43 = r.CheckBreak()
		}
		if yyb43 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj43-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ProjectStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym46 := z.EncBinary()
		_ = yym46
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep47 := !z.EncBinary()
			yy2arr47 := z.EncBasicHandle().StructToArray
			var yyq47 [1]bool
			_, _, _ = yysep47, yyq47, yy2arr47
			const yyr47 bool = false
			yyq47[0] = x.Phase != ""
			var yynn47 int
			if yyr47 || yy2arr47 {
				r.EncodeArrayStart(1)
			} else {
				yynn47 = 0
				for _, b := range yyq47 {
					if b {
						yynn47++
					}
				}
				r.EncodeMapStart(yynn47)
				yynn47 = 0
			}
			if yyr47 || yy2arr47 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq47[0] {
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Phase) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Phase))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq47[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Phase) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Phase))
					}
				}
			}
			if yyr47 || yy2arr47 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ProjectStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym51 := z.DecBinary()
	_ = yym51
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct52 := r.ContainerType()
		if yyct52 == codecSelferValueTypeMap1234 {
			yyl52 := r.ReadMapStart()
			if yyl52 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl52, d)
			}
		} else if yyct52 == codecSelferValueTypeArray1234 {
			yyl52 := r.ReadArrayStart()
			if yyl52 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl52, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ProjectStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys53Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys53Slc
	var yyhl53 bool = l >= 0
	for yyj53 := 0; ; yyj53++ {
		if yyhl53 {
			if yyj53 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys53Slc = r.DecodeBytes(yys53Slc, true, true)
		yys53 := string(yys53Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys53 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = pkg2_v1.NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys53)
		} // end switch yys53
	} // end for yyj53
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ProjectStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = pkg2_v1.NamespacePhase(r.DecodeString())
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Project) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym57 := z.EncBinary()
		_ = yym57
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep58 := !z.EncBinary()
			yy2arr58 := z.EncBasicHandle().StructToArray
			var yyq58 [5]bool
			_, _, _ = yysep58, yyq58, yy2arr58
			const yyr58 bool = false
			yyq58[0] = x.Kind != ""
			yyq58[1] = x.APIVersion != ""
			yyq58[2] = true
			yyq58[3] = true
			yyq58[4] = true
			var yynn58 int
			if yyr58 || yy2arr58 {
				r.EncodeArrayStart(5)
			} else {
				yynn58 = 0
				for _, b := range yyq58 {
					if b {
						yynn58++
					}
				}
				r.EncodeMapStart(yynn58)
				yynn58 = 0
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[0] {
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq58[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym61 := z.EncBinary()
					_ = yym61
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[1] {
					yym63 := z.EncBinary()
					_ = yym63
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq58[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[2] {
					yy66 := &x.ObjectMeta
					yy66.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq58[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy67 := &x.ObjectMeta
					yy67.CodecEncodeSelf(e)
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[3] {
					yy69 := &x.Spec
					yy69.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq58[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy70 := &x.Spec
					yy70.CodecEncodeSelf(e)
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq58[4] {
					yy72 := &x.Status
					yy72.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq58[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy73 := &x.Status
					yy73.CodecEncodeSelf(e)
				}
			}
			if yyr58 || yy2arr58 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Project) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym74 := z.DecBinary()
	_ = yym74
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct75 := r.ContainerType()
		if yyct75 == codecSelferValueTypeMap1234 {
			yyl75 := r.ReadMapStart()
			if yyl75 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl75, d)
			}
		} else if yyct75 == codecSelferValueTypeArray1234 {
			yyl75 := r.ReadArrayStart()
			if yyl75 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl75, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Project) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys76Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys76Slc
	var yyhl76 bool = l >= 0
	for yyj76 := 0; ; yyj76++ {
		if yyhl76 {
			if yyj76 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys76Slc = r.DecodeBytes(yys76Slc, true, true)
		yys76 := string(yys76Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys76 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv79 := &x.ObjectMeta
				yyv79.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ProjectSpec{}
			} else {
				yyv80 := &x.Spec
				yyv80.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ProjectStatus{}
			} else {
				yyv81 := &x.Status
				yyv81.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys76)
		} // end switch yys76
	} // end for yyj76
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Project) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj82 int
	var yyb82 bool
	var yyhl82 bool = l >= 0
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv85 := &x.ObjectMeta
		yyv85.CodecDecodeSelf(d)
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ProjectSpec{}
	} else {
		yyv86 := &x.Spec
		yyv86.CodecDecodeSelf(d)
	}
	yyj82++
	if yyhl82 {
		yyb82 = yyj82 > l
	} else {
		yyb82 = r.CheckBreak()
	}
	if yyb82 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ProjectStatus{}
	} else {
		yyv87 := &x.Status
		yyv87.CodecDecodeSelf(d)
	}
	for {
		yyj82++
		if yyhl82 {
			yyb82 = yyj82 > l
		} else {
			yyb82 = r.CheckBreak()
		}
		if yyb82 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj82-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ProjectRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym88 := z.EncBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep89 := !z.EncBinary()
			yy2arr89 := z.EncBasicHandle().StructToArray
			var yyq89 [5]bool
			_, _, _ = yysep89, yyq89, yy2arr89
			const yyr89 bool = false
			yyq89[0] = x.Kind != ""
			yyq89[1] = x.APIVersion != ""
			yyq89[2] = true
			yyq89[3] = x.DisplayName != ""
			yyq89[4] = x.Description != ""
			var yynn89 int
			if yyr89 || yy2arr89 {
				r.EncodeArrayStart(5)
			} else {
				yynn89 = 0
				for _, b := range yyq89 {
					if b {
						yynn89++
					}
				}
				r.EncodeMapStart(yynn89)
				yynn89 = 0
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq89[0] {
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq89[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq89[1] {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq89[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq89[2] {
					yy97 := &x.ObjectMeta
					yy97.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq89[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy98 := &x.ObjectMeta
					yy98.CodecEncodeSelf(e)
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq89[3] {
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq89[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq89[4] {
					yym103 := z.EncBinary()
					_ = yym103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq89[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym104 := z.EncBinary()
					_ = yym104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr89 || yy2arr89 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ProjectRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym105 := z.DecBinary()
	_ = yym105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct106 := r.ContainerType()
		if yyct106 == codecSelferValueTypeMap1234 {
			yyl106 := r.ReadMapStart()
			if yyl106 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl106, d)
			}
		} else if yyct106 == codecSelferValueTypeArray1234 {
			yyl106 := r.ReadArrayStart()
			if yyl106 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl106, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ProjectRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys107Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys107Slc
	var yyhl107 bool = l >= 0
	for yyj107 := 0; ; yyj107++ {
		if yyhl107 {
			if yyj107 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys107Slc = r.DecodeBytes(yys107Slc, true, true)
		yys107 := string(yys107Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys107 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv110 := &x.ObjectMeta
				yyv110.CodecDecodeSelf(d)
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				x.DisplayName = ""
			} else {
				x.DisplayName = string(r.DecodeString())
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys107)
		} // end switch yys107
	} // end for yyj107
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ProjectRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj113 int
	var yyb113 bool
	var yyhl113 bool = l >= 0
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv116 := &x.ObjectMeta
		yyv116.CodecDecodeSelf(d)
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DisplayName = ""
	} else {
		x.DisplayName = string(r.DecodeString())
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	for {
		yyj113++
		if yyhl113 {
			yyb113 = yyj113 > l
		} else {
			yyb113 = r.CheckBreak()
		}
		if yyb113 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj113-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceProject(v []Project, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv119 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy120 := &yyv119
		yy120.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceProject(v *[]Project, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv121 := *v
	yyh121, yyl121 := z.DecSliceHelperStart()
	var yyc121 bool
	if yyl121 == 0 {
		if yyv121 == nil {
			yyv121 = []Project{}
			yyc121 = true
		} else if len(yyv121) != 0 {
			yyv121 = yyv121[:0]
			yyc121 = true
		}
	} else if yyl121 > 0 {
		var yyrr121, yyrl121 int
		var yyrt121 bool
		if yyl121 > cap(yyv121) {

			yyrg121 := len(yyv121) > 0
			yyv2121 := yyv121
			yyrl121, yyrt121 = z.DecInferLen(yyl121, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt121 {
				if yyrl121 <= cap(yyv121) {
					yyv121 = yyv121[:yyrl121]
				} else {
					yyv121 = make([]Project, yyrl121)
				}
			} else {
				yyv121 = make([]Project, yyrl121)
			}
			yyc121 = true
			yyrr121 = len(yyv121)
			if yyrg121 {
				copy(yyv121, yyv2121)
			}
		} else if yyl121 != len(yyv121) {
			yyv121 = yyv121[:yyl121]
			yyc121 = true
		}
		yyj121 := 0
		for ; yyj121 < yyrr121; yyj121++ {
			yyh121.ElemContainerState(yyj121)
			if r.TryDecodeAsNil() {
				yyv121[yyj121] = Project{}
			} else {
				yyv122 := &yyv121[yyj121]
				yyv122.CodecDecodeSelf(d)
			}

		}
		if yyrt121 {
			for ; yyj121 < yyl121; yyj121++ {
				yyv121 = append(yyv121, Project{})
				yyh121.ElemContainerState(yyj121)
				if r.TryDecodeAsNil() {
					yyv121[yyj121] = Project{}
				} else {
					yyv123 := &yyv121[yyj121]
					yyv123.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj121 := 0
		for ; !r.CheckBreak(); yyj121++ {

			if yyj121 >= len(yyv121) {
				yyv121 = append(yyv121, Project{}) // var yyz121 Project
				yyc121 = true
			}
			yyh121.ElemContainerState(yyj121)
			if yyj121 < len(yyv121) {
				if r.TryDecodeAsNil() {
					yyv121[yyj121] = Project{}
				} else {
					yyv124 := &yyv121[yyj121]
					yyv124.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj121 < len(yyv121) {
			yyv121 = yyv121[:yyj121]
			yyc121 = true
		} else if yyj121 == 0 && yyv121 == nil {
			yyv121 = []Project{}
			yyc121 = true
		}
	}
	yyh121.End()
	if yyc121 {
		*v = yyv121
	}
}

func (x codecSelfer1234) encSlicev1_FinalizerName(v []pkg2_v1.FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv125 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym126 := z.EncBinary()
		_ = yym126
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv125) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv125))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_FinalizerName(v *[]pkg2_v1.FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv127 := *v
	yyh127, yyl127 := z.DecSliceHelperStart()
	var yyc127 bool
	if yyl127 == 0 {
		if yyv127 == nil {
			yyv127 = []pkg2_v1.FinalizerName{}
			yyc127 = true
		} else if len(yyv127) != 0 {
			yyv127 = yyv127[:0]
			yyc127 = true
		}
	} else if yyl127 > 0 {
		var yyrr127, yyrl127 int
		var yyrt127 bool
		if yyl127 > cap(yyv127) {

			yyrl127, yyrt127 = z.DecInferLen(yyl127, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt127 {
				if yyrl127 <= cap(yyv127) {
					yyv127 = yyv127[:yyrl127]
				} else {
					yyv127 = make([]pkg2_v1.FinalizerName, yyrl127)
				}
			} else {
				yyv127 = make([]pkg2_v1.FinalizerName, yyrl127)
			}
			yyc127 = true
			yyrr127 = len(yyv127)
		} else if yyl127 != len(yyv127) {
			yyv127 = yyv127[:yyl127]
			yyc127 = true
		}
		yyj127 := 0
		for ; yyj127 < yyrr127; yyj127++ {
			yyh127.ElemContainerState(yyj127)
			if r.TryDecodeAsNil() {
				yyv127[yyj127] = ""
			} else {
				yyv127[yyj127] = pkg2_v1.FinalizerName(r.DecodeString())
			}

		}
		if yyrt127 {
			for ; yyj127 < yyl127; yyj127++ {
				yyv127 = append(yyv127, "")
				yyh127.ElemContainerState(yyj127)
				if r.TryDecodeAsNil() {
					yyv127[yyj127] = ""
				} else {
					yyv127[yyj127] = pkg2_v1.FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj127 := 0
		for ; !r.CheckBreak(); yyj127++ {

			if yyj127 >= len(yyv127) {
				yyv127 = append(yyv127, "") // var yyz127 pkg2_v1.FinalizerName
				yyc127 = true
			}
			yyh127.ElemContainerState(yyj127)
			if yyj127 < len(yyv127) {
				if r.TryDecodeAsNil() {
					yyv127[yyj127] = ""
				} else {
					yyv127[yyj127] = pkg2_v1.FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj127 < len(yyv127) {
			yyv127 = yyv127[:yyj127]
			yyc127 = true
		} else if yyj127 == 0 && yyv127 == nil {
			yyv127 = []pkg2_v1.FinalizerName{}
			yyc127 = true
		}
	}
	yyh127.End()
	if yyc127 {
		*v = yyv127
	}
}
